const JOBS_KEY='wt_jobs_v2';const TYPES_KEY='wt_job_types_v2';
const $=s=>document.querySelector(s);const $$=s=>Array.from(document.querySelectorAll(s));
function load(k,f){try{return JSON.parse(localStorage.getItem(k))??f}catch{return f}}function save(k,v){localStorage.setItem(k,JSON.stringify(v))}
function initJobTypes(){const sel=$('#jobType');let t=load(TYPES_KEY,['Oil Change','Brake Job','Diagnosis','Tune-Up']);t=[...new Set(t)];sel.innerHTML=t.map(x=>`<option value="${x}">${x}</option>`).join('');save(TYPES_KEY,t)}
function addJobTypeFlow(){const name=prompt('Add new Job Type:');if(!name)return;let t=load(TYPES_KEY,[]);if(!t.includes(name))t.push(name);save(TYPES_KEY,t);initJobTypes();$('#jobType').value=name}
function getFormData(){return{year:$('#year').value.trim(),make:$('#make').value.trim(),model:$('#model').value.trim(),vin:$('#vin').value.trim(),date:$('#date').value,plate:$('#plate').value.trim(),mileage:$('#mileage').value.trim(),codes:$('#codes').value.trim(),jobType:$('#jobType').value,notes:$('#notes').value.trim(),id:(crypto.randomUUID?crypto.randomUUID():String(Date.now())),createdAt:Date.now()}}
function validate(j){if(!(j.vin||j.plate||(j.make&&j.model))){alert('Enter at least a VIN, Plate, or Make+Model.');return false}return true}
function formatJob(j){return[`Year: ${j.year}`,`Make: ${j.make}`,`Model: ${j.model}`,`VIN: ${j.vin}`,`Date: ${j.date}`,`Plate: ${j.plate}`,`Mileage: ${j.mileage}`,`Job Type: ${j.jobType}`,`Codes: ${j.codes}`,`Notes: ${j.notes}`].join('\n')}
function saveJob(){const j=getFormData();if(!validate(j))return;const a=load(JOBS_KEY,[]);a.unshift(j);save(JOBS_KEY,a);alert('Job saved.');renderResults(a)}
function emailJob(){const j=getFormData();if(!validate(j))return;const subject=encodeURIComponent(`Job Info: ${j.make} ${j.model} ${j.plate||j.vin}`);const body=encodeURIComponent(formatJob(j));location.href=`mailto:?subject=${subject}&body=${body}`}
function matchKeyword(j,kw){if(!kw)return false;kw=kw.toLowerCase();return Object.values(j).some(v=>typeof v==='string'&&v.toLowerCase().includes(kw))}
function matchByForm(j){const c=getFormData();const ent=Object.entries(c).filter(([k,v])=>v&&!['id','createdAt','notes','codes'].includes(k));return ent.every(([k,v])=>String(j[k]??'').toLowerCase().includes(String(v).toLowerCase()))}
function searchByKeyword(){const kw=$('#keyword').value.trim();const a=load(JOBS_KEY,[]);renderResults(kw?a.filter(j=>matchKeyword(j,kw)):a)}
function searchByForm(){const a=load(JOBS_KEY,[]);renderResults(a.filter(j=>matchByForm(j)))}
function renderResults(list){const ul=$('#results');if(!list.length){ul.innerHTML='<li class="card">No results.</li>';return}ul.innerHTML=list.map(j=>`<li class="card"><div class="meta">${new Date(j.createdAt).toLocaleString()}</div><div><strong>${j.make||''} ${j.model||''}</strong> ${j.year?('('+j.year+')'):''}</div><div class="meta">VIN: ${j.vin||'—'} • Plate: ${j.plate||'—'} • Mileage: ${j.mileage||'—'} • Type: ${j.jobType||'—'}</div><details><summary>Details</summary><pre style="white-space:pre-wrap;margin:8px 0;">${formatJob(j)}</pre></details><div class="actions"><button data-id="${j.id}" class="emailOne">Email</button><button data-id="${j.id}" class="deleteOne alt">Delete</button></div></li>`).join('');$$('#results .emailOne').forEach(b=>b.addEventListener('click',e=>{const id=e.currentTarget.getAttribute('data-id');const j=load(JOBS_KEY,[]).find(x=>x.id===id);if(j){const s=encodeURIComponent(`Job Info: ${j.make} ${j.model} ${j.plate||j.vin}`);const body=encodeURIComponent(formatJob(j));location.href=`mailto:?subject=${s}&body=${body}`}}));$$('#results .deleteOne').forEach(b=>b.addEventListener('click',e=>{const id=e.currentTarget.getAttribute('data-id');let a=load(JOBS_KEY,[]);a=a.filter(x=>x.id!==id);save(JOBS_KEY,a);renderResults(a)}))}
function exportData(){const data={jobs:load(JOBS_KEY,[]),types:load(TYPES_KEY,[]),exportedAt:new Date().toISOString()};const blob=new Blob([JSON.stringify(data,null,2)],{type:'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download='workflow-tracker-data.json';a.click();URL.revokeObjectURL(url)}
function importData(file){const r=new FileReader();r.onload=e=>{try{const o=JSON.parse(e.target.result);if(o.jobs)save(JOBS_KEY,o.jobs);if(o.types)save(TYPES_KEY,o.types);initJobTypes();renderResults(load(JOBS_KEY,[]));alert('Data imported.')}catch{alert('Import failed.')}};r.readAsText(file)}
function registerSW(){if('serviceWorker'in navigator){navigator.serviceWorker.register('./service-worker.js').catch(()=>{})}}
document.addEventListener('DOMContentLoaded',()=>{initJobTypes();renderResults(load(JOBS_KEY,[]));$('#addTypeBtn').addEventListener('click',addJobTypeFlow);$('#saveBtn').addEventListener('click',saveJob);$('#emailBtn').addEventListener('click',emailJob);$('#searchBtn').addEventListener('click',searchByKeyword);$('#searchByFormBtn').addEventListener('click',searchByForm);$('#showAllBtn').addEventListener('click',()=>renderResults(load(JOBS_KEY,[])));$('#exportBtn').addEventListener('click',exportData);$('#importBtn').addEventListener('click',()=>$('#importFile').click());$('#importFile').addEventListener('change',e=>{if(e.target.files?.[0])importData(e.target.files[0])});registerSW()})